// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== TENANT MANAGEMENT =====
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  products    Product[]
  orders      Order[]
  categories  Category[]
  auditLogs   AuditLog[]

  @@map("tenants")
}

// ===== USER MANAGEMENT =====
model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  name      String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@unique([tenantId, email])
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

// ===== PRODUCT CATALOG =====
model Category {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([tenantId, name])
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  categoryId  String?
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  sku         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]

  @@unique([tenantId, sku])
  @@map("products")
}

// ===== ORDER MANAGEMENT =====
model Order {
  id          String      @id @default(cuid())
  tenantId    String
  userId      String
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@map("order_items")
}

// ===== AUDIT LOG =====
model AuditLog {
  id          String     @id @default(cuid())
  tenantId    String
  tableName   String
  operation   Operation
  recordId    String
  oldValues   Json?
  newValues   Json?
  userId      String?
  userEmail   String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())

  // Relations
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

enum Operation {
  CREATE
  UPDATE
  DELETE
}
