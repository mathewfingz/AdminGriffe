# Production values for worker-sync
# This is a YAML-formatted file optimized for production environments

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "fast-ssd"

# Application configuration
replicaCount: 5
maxReplicas: 20
minReplicas: 3

image:
  repository: worker-sync
  pullPolicy: Always
  tag: "v1.0.0"

imagePullSecrets:
  - name: regcred

nameOverride: ""
fullnameOverride: ""

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations and labels
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3001"
  prometheus.io/path: "/metrics"

podLabels:
  version: "v1.0.0"
  tier: "backend"

# Security context
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  enabled: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

# Service configuration
service:
  type: ClusterIP
  port: 3000
  targetPort: http
  metricsPort: 3001
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: worker-sync.production.company.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: worker-sync-tls
      hosts:
        - worker-sync.production.company.com

# Resource limits and requests
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 2Gi
  requests:
    cpu: 1000m
    memory: 2Gi
    ephemeral-storage: 1Gi

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 65
  targetMemoryUtilizationPercentage: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

# Node selection
nodeSelector:
  node-type: "worker-sync"

tolerations:
  - key: "worker-sync"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - worker-sync
      topologyKey: kubernetes.io/hostname
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
        - key: node-type
          operator: In
          values:
          - worker-sync

# Environment variables
env:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  HEALTH_CHECK_ENABLED: "true"
  GRACEFUL_SHUTDOWN_TIMEOUT: "30000"
  MAX_CONNECTIONS: "1000"
  POOL_SIZE: "20"

# Configuration
config:
  logLevel: "info"
  metricsEnabled: true
  healthCheckEnabled: true
  gracefulShutdownTimeout: 30000
  
  # Sync configuration
  sync:
    batchSize: 1000
    maxRetries: 5
    retryDelay: 1000
    conflictResolution: "timestamp"
    enableDeduplication: true
    
  # Queue configuration
  queue:
    concurrency: 10
    maxJobs: 10000
    retentionDays: 7
    
  # Cache configuration
  cache:
    ttl: 3600
    maxSize: 10000

# Database configurations
databases:
  postgresql:
    enabled: true
    host: "postgresql-primary.database.svc.cluster.local"
    port: 5432
    database: "audit_db"
    username: "audit_user"
    ssl: true
    poolSize: 20
    connectionTimeout: 30000
    idleTimeout: 600000
    
  mysql:
    enabled: true
    host: "mysql-primary.database.svc.cluster.local"
    port: 3306
    database: "audit_db"
    username: "audit_user"
    ssl: true
    poolSize: 20
    connectionTimeout: 30000
    
  mongodb:
    enabled: true
    host: "mongodb-primary.database.svc.cluster.local"
    port: 27017
    database: "audit_db"
    username: "audit_user"
    ssl: true
    poolSize: 20
    authSource: "admin"

# Redis configuration
redis:
  enabled: true
  host: "redis-master.cache.svc.cluster.local"
  port: 6379
  database: 0
  ssl: true
  poolSize: 20
  keyPrefix: "worker-sync:"
  
# Kafka configuration
kafka:
  enabled: true
  brokers:
    - "kafka-0.kafka.svc.cluster.local:9092"
    - "kafka-1.kafka.svc.cluster.local:9092"
    - "kafka-2.kafka.svc.cluster.local:9092"
  ssl: true
  sasl: true
  clientId: "worker-sync-prod"
  groupId: "worker-sync-group"
  
# RabbitMQ configuration
rabbitmq:
  enabled: true
  host: "rabbitmq.messaging.svc.cluster.local"
  port: 5672
  username: "worker-sync"
  ssl: true
  vhost: "/worker-sync"

# Secrets configuration
secrets:
  create: true
  annotations:
    kubernetes.io/managed-by: "external-secrets-operator"
  data: {}
    # Database passwords will be injected by external-secrets-operator
    # POSTGRESQL_PASSWORD: ""
    # MYSQL_PASSWORD: ""
    # MONGODB_PASSWORD: ""
    # REDIS_PASSWORD: ""
    # KAFKA_PASSWORD: ""
    # RABBITMQ_PASSWORD: ""

# Monitoring configuration
monitoring:
  enabled: true
  
  # Prometheus configuration
  prometheus:
    enabled: true
    namespace: "monitoring"
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 100Gi
    retention: "90d"
    resources:
      limits:
        cpu: 2000m
        memory: 8Gi
      requests:
        cpu: 1000m
        memory: 4Gi
    
  # Grafana configuration
  grafana:
    enabled: true
    namespace: "monitoring"
    adminPassword: "secure-admin-password-change-me"
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 20Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    
  # AlertManager configuration
  alertmanager:
    enabled: true
    namespace: "monitoring"
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 10Gi
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

# ServiceMonitor configuration
serviceMonitor:
  enabled: true
  namespace: "monitoring"
  interval: "30s"
  scrapeTimeout: "10s"
  path: "/metrics"
  labels:
    release: prometheus

# PrometheusRule configuration
prometheusRule:
  enabled: true
  namespace: "monitoring"
  labels:
    release: prometheus
  
  # Alert thresholds
  alerts:
    syncLagThreshold: 500
    errorRateThreshold: 0.01
    queueDepthThreshold: 1000
    conflictRateThreshold: 0.05
    cpuThreshold: 80
    memoryThreshold: 85
    diskThreshold: 90

# Network policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: api-gateway
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 3001
  
  egress:
    - to: []
      ports:
        - protocol: UDP
          port: 53  # DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 3306  # MySQL
        - protocol: TCP
          port: 27017 # MongoDB
    - to:
        - namespaceSelector:
            matchLabels:
              name: cache
      ports:
        - protocol: TCP
          port: 6379  # Redis
    - to:
        - namespaceSelector:
            matchLabels:
              name: messaging
      ports:
        - protocol: TCP
          port: 9092  # Kafka
        - protocol: TCP
          port: 5672  # RabbitMQ

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create"]
    - apiGroups: ["metrics.k8s.io"]
      resources: ["pods", "nodes"]
      verbs: ["get", "list"]

# Jobs configuration
jobs:
  initJob:
    enabled: true
    image:
      repository: worker-sync
      tag: "v1.0.0"
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    backoffLimit: 3
    activeDeadlineSeconds: 600
    ttlSecondsAfterFinished: 86400
    
  migrationJob:
    enabled: true
    image:
      repository: worker-sync
      tag: "v1.0.0"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    backoffLimit: 3
    activeDeadlineSeconds: 1800
    ttlSecondsAfterFinished: 86400

# CronJobs configuration
cronJobs:
  auditCleanup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retentionDays: 90
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
    activeDeadlineSeconds: 3600
    backoffLimit: 3
    ttlSecondsAfterFinished: 86400
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
        
  metricsCleanup:
    enabled: true
    schedule: "0 3 * * *"  # Daily at 3 AM
    retentionDays: 30
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
    activeDeadlineSeconds: 1800
    backoffLimit: 3
    ttlSecondsAfterFinished: 86400
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
        
  healthCheck:
    enabled: true
    schedule: "*/5 * * * *"  # Every 5 minutes
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 3
    activeDeadlineSeconds: 300
    backoffLimit: 2
    ttlSecondsAfterFinished: 3600
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
        
  backup:
    enabled: true
    schedule: "0 1 * * *"  # Daily at 1 AM
    retentionDays: 30
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 7
    failedJobsHistoryLimit: 3
    activeDeadlineSeconds: 7200
    backoffLimit: 2
    ttlSecondsAfterFinished: 86400
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    s3:
      enabled: true
      bucket: "worker-sync-backups-prod"
      region: "us-west-2"
      storageClass: "STANDARD_IA"

# Persistence configuration
persistence:
  enabled: true
  
  # Worker-sync data
  workerSync:
    enabled: true
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce
    size: 50Gi
    
  # Backup storage
  backup:
    enabled: true
    storageClass: "standard"
    accessMode: ReadWriteOnce
    size: 200Gi

# Probes configuration
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache
  - name: config
    mountPath: /app/config
    readOnly: true

volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
  - name: config
    configMap:
      name: worker-sync-config

# Pod priority
priorityClassName: "high-priority"

# Termination grace period
terminationGracePeriodSeconds: 60

# DNS configuration
dnsPolicy: ClusterFirst
dnsConfig:
  options:
    - name: ndots
      value: "2"
    - name: edns0

# Additional labels
additionalLabels:
  environment: "production"
  team: "platform"
  cost-center: "engineering"

# Additional annotations
additionalAnnotations:
  deployment.kubernetes.io/revision: "1"
  meta.helm.sh/release-name: "worker-sync"
  meta.helm.sh/release-namespace: "worker-sync"