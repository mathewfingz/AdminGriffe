{{- if .Values.cleanup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "worker-sync.fullname" . }}-cleanup
  labels:
    {{- include "worker-sync.labels" . | nindent 4 }}
    app.kubernetes.io/component: cleanup
spec:
  schedule: {{ .Values.cleanup.schedule | quote }}
  concurrencyPolicy: {{ .Values.cleanup.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.cleanup.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.cleanup.failedJobsHistoryLimit | default 1 }}
  startingDeadlineSeconds: {{ .Values.cleanup.startingDeadlineSeconds | default 300 }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.cleanup.backoffLimit | default 2 }}
      activeDeadlineSeconds: {{ .Values.cleanup.activeDeadlineSeconds | default 1800 }}
      template:
        metadata:
          labels:
            {{- include "worker-sync.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cleanup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "worker-sync.serviceAccountName" . }}
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - name: cleanup
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - /bin/sh
                - -c
                - |
                  echo "Starting cleanup job..."
                  
                  # Cleanup old audit logs
                  {{- if .Values.postgresql.enabled }}
                  echo "Cleaning up PostgreSQL audit logs older than {{ .Values.cleanup.auditRetentionDays }} days..."
                  PGPASSWORD=$POSTGRES_PASSWORD psql -h {{ .Values.postgresql.host }} -p {{ .Values.postgresql.port }} -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }} -c "
                    DELETE FROM audit.audit_log 
                    WHERE executed_at < NOW() - INTERVAL '{{ .Values.cleanup.auditRetentionDays }} days';
                    
                    -- Cleanup resolved conflicts older than {{ .Values.cleanup.conflictRetentionDays }} days
                    DELETE FROM sync.sync_conflicts 
                    WHERE resolved = TRUE 
                    AND resolved_at < NOW() - INTERVAL '{{ .Values.cleanup.conflictRetentionDays }} days';
                    
                    -- Update statistics
                    ANALYZE audit.audit_log;
                    ANALYZE sync.sync_metadata;
                    ANALYZE sync.sync_conflicts;
                  "
                  {{- end }}
                  
                  {{- if .Values.mysql.enabled }}
                  echo "Cleaning up MySQL audit logs older than {{ .Values.cleanup.auditRetentionDays }} days..."
                  mysql -h {{ .Values.mysql.host }} -P {{ .Values.mysql.port }} -u {{ .Values.mysql.username }} --password=$MYSQL_PASSWORD {{ .Values.mysql.database }} << 'EOF'
                    DELETE FROM audit_db.audit_log 
                    WHERE executed_at < DATE_SUB(NOW(), INTERVAL {{ .Values.cleanup.auditRetentionDays }} DAY);
                    
                    DELETE FROM sync_db.sync_metadata 
                    WHERE sync_status = 'inactive' 
                    AND updated_at < DATE_SUB(NOW(), INTERVAL {{ .Values.cleanup.metadataRetentionDays }} DAY);
                    
                    OPTIMIZE TABLE audit_db.audit_log;
                    OPTIMIZE TABLE sync_db.sync_metadata;
                  EOF
                  {{- end }}
                  
                  {{- if .Values.mongodb.enabled }}
                  echo "Cleaning up MongoDB audit logs older than {{ .Values.cleanup.auditRetentionDays }} days..."
                  mongosh --host {{ .Values.mongodb.host }}:{{ .Values.mongodb.port }} {{ .Values.mongodb.database }} << 'EOF'
                    // Cleanup old audit logs
                    var cutoffDate = new Date();
                    cutoffDate.setDate(cutoffDate.getDate() - {{ .Values.cleanup.auditRetentionDays }});
                    
                    var result = db.audit_log.deleteMany({
                      "executed_at": { $lt: cutoffDate }
                    });
                    print("Deleted " + result.deletedCount + " old audit log entries");
                    
                    // Cleanup resolved conflicts
                    var conflictCutoffDate = new Date();
                    conflictCutoffDate.setDate(conflictCutoffDate.getDate() - {{ .Values.cleanup.conflictRetentionDays }});
                    
                    var conflictResult = db.sync_conflicts.deleteMany({
                      "resolved": true,
                      "resolved_at": { $lt: conflictCutoffDate }
                    });
                    print("Deleted " + conflictResult.deletedCount + " old resolved conflicts");
                  EOF
                  {{- end }}
                  
                  # Cleanup Redis cache
                  {{- if .Values.redis.enabled }}
                  echo "Cleaning up Redis cache..."
                  redis-cli -h {{ .Values.redis.host }} -p {{ .Values.redis.port }} {{- if .Values.secrets.redis.password }} -a $REDIS_PASSWORD {{- end }} << 'EOF'
                    # Remove expired keys
                    EVAL "
                      local keys = redis.call('KEYS', 'sync:temp:*')
                      local count = 0
                      for i=1,#keys do
                        local ttl = redis.call('TTL', keys[i])
                        if ttl == -1 then
                          redis.call('DEL', keys[i])
                          count = count + 1
                        end
                      end
                      return count
                    " 0
                    
                    # Cleanup old metrics
                    EVAL "
                      local keys = redis.call('KEYS', 'metrics:*')
                      local cutoff = tonumber(ARGV[1])
                      local count = 0
                      for i=1,#keys do
                        local timestamp = redis.call('HGET', keys[i], 'timestamp')
                        if timestamp and tonumber(timestamp) < cutoff then
                          redis.call('DEL', keys[i])
                          count = count + 1
                        end
                      end
                      return count
                    " 0 $(date -d "{{ .Values.cleanup.metricsRetentionHours }} hours ago" +%s)
                  EOF
                  {{- end }}
                  
                  # Cleanup application logs
                  {{- if .Values.persistence.logs.enabled }}
                  echo "Cleaning up application logs older than {{ .Values.cleanup.logRetentionDays }} days..."
                  find /var/log/worker-sync -name "*.log" -type f -mtime +{{ .Values.cleanup.logRetentionDays }} -delete
                  find /var/log/worker-sync -name "*.log.gz" -type f -mtime +{{ .Values.cleanup.logRetentionDays }} -delete
                  {{- end }}
                  
                  # Report cleanup statistics
                  echo "Cleanup completed successfully at $(date)"
                  
                  # Send metrics to monitoring system
                  {{- if .Values.monitoring.prometheus.enabled }}
                  echo "cleanup_job_completed{job=\"worker-sync-cleanup\"} $(date +%s)" | curl -X POST \
                    --data-binary @- \
                    http://{{ .Values.monitoring.prometheus.pushgateway.host }}:{{ .Values.monitoring.prometheus.pushgateway.port }}/metrics/job/worker-sync-cleanup/instance/$(hostname) || true
                  {{- end }}
              env:
                {{- if .Values.postgresql.enabled }}
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "worker-sync.fullname" . }}-secret
                      key: postgresql-password
                {{- end }}
                {{- if .Values.mysql.enabled }}
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "worker-sync.fullname" . }}-secret
                      key: mysql-password
                {{- end }}
                {{- if .Values.mongodb.enabled }}
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "worker-sync.fullname" . }}-secret
                      key: mongodb-password
                {{- end }}
                {{- if .Values.redis.enabled }}
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "worker-sync.fullname" . }}-secret
                      key: redis-password
                {{- end }}
              resources:
                {{- toYaml .Values.cleanup.resources | nindent 16 }}
              {{- if .Values.persistence.logs.enabled }}
              volumeMounts:
                - name: logs
                  mountPath: /var/log/worker-sync
              {{- end }}
          {{- if .Values.persistence.logs.enabled }}
          volumes:
            - name: logs
              persistentVolumeClaim:
                claimName: {{ include "worker-sync.fullname" . }}-logs
          {{- end }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}