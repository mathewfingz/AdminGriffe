{{- if .Values.initJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "worker-sync.fullname" . }}-init
  labels:
    {{- include "worker-sync.labels" . | nindent 4 }}
    app.kubernetes.io/component: init
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: {{ .Values.initJob.backoffLimit | default 3 }}
  activeDeadlineSeconds: {{ .Values.initJob.activeDeadlineSeconds | default 300 }}
  template:
    metadata:
      labels:
        {{- include "worker-sync.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: init
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "worker-sync.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: init-databases
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Initializing databases..."
              
              # Wait for PostgreSQL
              {{- if .Values.postgresql.enabled }}
              echo "Waiting for PostgreSQL..."
              until pg_isready -h {{ .Values.postgresql.host }} -p {{ .Values.postgresql.port }} -U {{ .Values.postgresql.username }}; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is ready"
              
              # Initialize PostgreSQL schemas
              PGPASSWORD=$POSTGRES_PASSWORD psql -h {{ .Values.postgresql.host }} -p {{ .Values.postgresql.port }} -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }} -c "
                CREATE SCHEMA IF NOT EXISTS audit;
                CREATE SCHEMA IF NOT EXISTS sync;
                
                -- Create audit_log table
                CREATE TABLE IF NOT EXISTS audit.audit_log (
                  id BIGSERIAL PRIMARY KEY,
                  db_engine TEXT NOT NULL,
                  schema_name TEXT,
                  table_name TEXT,
                  operation TEXT CHECK (operation IN ('INSERT','UPDATE','DELETE')),
                  primary_key JSONB,
                  diff_old JSONB,
                  diff_new JSONB,
                  executed_by TEXT,
                  client_ip INET,
                  executed_at TIMESTAMPTZ DEFAULT now(),
                  signature BYTEA
                );
                
                -- Create sync_metadata table
                CREATE TABLE IF NOT EXISTS sync.sync_metadata (
                  id BIGSERIAL PRIMARY KEY,
                  source_db TEXT NOT NULL,
                  target_db TEXT NOT NULL,
                  table_name TEXT NOT NULL,
                  last_sync_timestamp TIMESTAMPTZ DEFAULT now(),
                  sync_status TEXT DEFAULT 'active',
                  created_at TIMESTAMPTZ DEFAULT now(),
                  updated_at TIMESTAMPTZ DEFAULT now()
                );
                
                -- Create sync_conflicts table
                CREATE TABLE IF NOT EXISTS sync.sync_conflicts (
                  id BIGSERIAL PRIMARY KEY,
                  source_db TEXT NOT NULL,
                  target_db TEXT NOT NULL,
                  table_name TEXT NOT NULL,
                  record_id TEXT NOT NULL,
                  conflict_type TEXT NOT NULL,
                  source_data JSONB,
                  target_data JSONB,
                  resolution_strategy TEXT,
                  resolved BOOLEAN DEFAULT FALSE,
                  created_at TIMESTAMPTZ DEFAULT now(),
                  resolved_at TIMESTAMPTZ
                );
                
                CREATE INDEX IF NOT EXISTS idx_audit_log_executed_at ON audit.audit_log(executed_at);
                CREATE INDEX IF NOT EXISTS idx_audit_log_table_name ON audit.audit_log(table_name);
                CREATE INDEX IF NOT EXISTS idx_sync_metadata_source_target ON sync.sync_metadata(source_db, target_db);
                CREATE INDEX IF NOT EXISTS idx_sync_conflicts_unresolved ON sync.sync_conflicts(resolved) WHERE resolved = FALSE;
              "
              {{- end }}
              
              # Wait for MySQL
              {{- if .Values.mysql.enabled }}
              echo "Waiting for MySQL..."
              until mysqladmin ping -h {{ .Values.mysql.host }} -P {{ .Values.mysql.port }} -u {{ .Values.mysql.username }} --password=$MYSQL_PASSWORD --silent; do
                echo "MySQL is unavailable - sleeping"
                sleep 2
              done
              echo "MySQL is ready"
              
              # Initialize MySQL schemas
              mysql -h {{ .Values.mysql.host }} -P {{ .Values.mysql.port }} -u {{ .Values.mysql.username }} --password=$MYSQL_PASSWORD {{ .Values.mysql.database }} << 'EOF'
                CREATE DATABASE IF NOT EXISTS audit_db;
                CREATE DATABASE IF NOT EXISTS sync_db;
                
                USE audit_db;
                CREATE TABLE IF NOT EXISTS audit_log (
                  id BIGINT AUTO_INCREMENT PRIMARY KEY,
                  db_engine VARCHAR(50) NOT NULL,
                  schema_name VARCHAR(100),
                  table_name VARCHAR(100),
                  operation ENUM('INSERT','UPDATE','DELETE'),
                  primary_key JSON,
                  diff_old JSON,
                  diff_new JSON,
                  executed_by VARCHAR(100),
                  client_ip VARCHAR(45),
                  executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  signature BLOB,
                  INDEX idx_executed_at (executed_at),
                  INDEX idx_table_name (table_name)
                );
                
                USE sync_db;
                CREATE TABLE IF NOT EXISTS sync_metadata (
                  id BIGINT AUTO_INCREMENT PRIMARY KEY,
                  source_db VARCHAR(100) NOT NULL,
                  target_db VARCHAR(100) NOT NULL,
                  table_name VARCHAR(100) NOT NULL,
                  last_sync_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  sync_status VARCHAR(20) DEFAULT 'active',
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                  INDEX idx_source_target (source_db, target_db)
                );
              EOF
              {{- end }}
              
              # Wait for MongoDB
              {{- if .Values.mongodb.enabled }}
              echo "Waiting for MongoDB..."
              until mongosh --host {{ .Values.mongodb.host }}:{{ .Values.mongodb.port }} --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
                echo "MongoDB is unavailable - sleeping"
                sleep 2
              done
              echo "MongoDB is ready"
              
              # Initialize MongoDB collections
              mongosh --host {{ .Values.mongodb.host }}:{{ .Values.mongodb.port }} {{ .Values.mongodb.database }} << 'EOF'
                db.createCollection("audit_log");
                db.createCollection("sync_metadata");
                db.createCollection("sync_conflicts");
                
                // Create indexes
                db.audit_log.createIndex({ "executed_at": 1 });
                db.audit_log.createIndex({ "table_name": 1 });
                db.sync_metadata.createIndex({ "source_db": 1, "target_db": 1 });
                db.sync_conflicts.createIndex({ "resolved": 1 });
              EOF
              {{- end }}
              
              echo "Database initialization completed successfully"
          env:
            {{- if .Values.postgresql.enabled }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "worker-sync.fullname" . }}-secret
                  key: postgresql-password
            {{- end }}
            {{- if .Values.mysql.enabled }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "worker-sync.fullname" . }}-secret
                  key: mysql-password
            {{- end }}
            {{- if .Values.mongodb.enabled }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "worker-sync.fullname" . }}-secret
                  key: mongodb-password
            {{- end }}
          resources:
            {{- toYaml .Values.initJob.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}