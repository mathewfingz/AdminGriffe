{{- if .Values.ingress.enabled -}}
{{- $fullName := include "audit-system.fullname" . -}}
{{- $svcPort := .Values.apiGateway.service.port -}}
{{- if and .Values.ingress.className (not (hasKey .Values.ingress.annotations "kubernetes.io/ingress.class")) }}
  {{- $_ := set .Values.ingress.annotations "kubernetes.io/ingress.class" .Values.ingress.className}}
{{- end }}
{{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ $fullName }}-ingress
  labels:
    {{- include "audit-system.labels" . | nindent 4 }}
  annotations:
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'";
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: {{ .Values.ingress.corsAllowOrigin | quote }}
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-Requested-With"
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/server-snippets: |
      location /ws {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
      }
    # SSL redirect
    {{- if .Values.ingress.tls }}
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    {{- end }}
    # Custom annotations
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if and .Values.ingress.className (semverCompare ">=1.18-0" .Capabilities.KubeVersion.GitVersion) }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- if and .pathType (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion) }}
            pathType: {{ .pathType }}
            {{- end }}
            backend:
              {{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion }}
              service:
                name: {{ $fullName }}-api-gateway
                port:
                  number: {{ $svcPort }}
              {{- else }}
              serviceName: {{ $fullName }}-api-gateway
              servicePort: {{ $svcPort }}
              {{- end }}
          {{- end }}
    {{- end }}
---
{{- if .Values.monitoring.enabled }}
# Separate ingress for monitoring endpoints (Prometheus, Grafana)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $fullName }}-monitoring-ingress
  labels:
    {{- include "audit-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: monitoring
  annotations:
    # Basic auth for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: {{ $fullName }}-monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Monitoring Access Required"
    # IP whitelist for monitoring
    {{- if .Values.monitoring.ingress.allowedIPs }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.monitoring.ingress.allowedIPs | join "," }}
    {{- end }}
    {{- with .Values.monitoring.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.monitoring.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.monitoring.ingress.host }}
      secretName: {{ $fullName }}-monitoring-tls
  {{- end }}
  rules:
    - host: {{ .Values.monitoring.ingress.host | quote }}
      http:
        paths:
          # Prometheus metrics
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: {{ $fullName }}-api-gateway
                port:
                  number: 9090
          # Grafana dashboard
          {{- if .Values.grafana.enabled }}
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: {{ $fullName }}-grafana
                port:
                  number: 80
          {{- end }}
          # Prometheus UI
          {{- if .Values.prometheus.enabled }}
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: {{ $fullName }}-prometheus-server
                port:
                  number: 80
          {{- end }}
{{- end }}
{{- end }}