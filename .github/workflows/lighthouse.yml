name: Lighthouse CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Start application
        run: |
          pnpm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read Lighthouse results
            const resultsPath = path.join(process.cwd(), '.lighthouseci');
            if (fs.existsSync(resultsPath)) {
              const files = fs.readdirSync(resultsPath);
              const reportFile = files.find(file => file.endsWith('.json'));
              
              if (reportFile) {
                const report = JSON.parse(fs.readFileSync(path.join(resultsPath, reportFile), 'utf8'));
                const scores = report.categories;
                
                const comment = `## üîç Lighthouse Audit Results
                
                | Category | Score |
                |----------|-------|
                | Performance | ${Math.round(scores.performance.score * 100)}/100 |
                | Accessibility | ${Math.round(scores.accessibility.score * 100)}/100 |
                | Best Practices | ${Math.round(scores['best-practices'].score * 100)}/100 |
                | SEO | ${Math.round(scores.seo.score * 100)}/100 |
                
                ${scores.performance.score >= 0.9 && scores.accessibility.score >= 0.9 ? '‚úÖ All scores meet requirements!' : '‚ö†Ô∏è Some scores below threshold'}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }