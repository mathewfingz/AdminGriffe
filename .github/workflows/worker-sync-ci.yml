name: Worker Sync CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/worker-sync/**'
      - '.github/workflows/worker-sync-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/worker-sync/**'
      - '.github/workflows/worker-sync-ci.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: admingriffe/worker-sync
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # LINT & FORMAT
  # ============================================================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/worker-sync
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run type-check

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/worker-sync
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Generate coverage report
        run: pnpm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/worker-sync/coverage/lcov.info
          flags: worker-sync-unit
          name: worker-sync-unit-coverage

      - name: Coverage threshold check
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold of 90%"
            exit 1
          fi

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/worker-sync
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_sync_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_sync_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_ROOT_PASSWORD: root_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 3306; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Setup test databases
        run: |
          pnpm run db:init:test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: test_sync_db
          POSTGRES_USERNAME: test_user
          POSTGRES_PASSWORD: test_password
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DATABASE: test_sync_db
          MYSQL_USERNAME: test_user
          MYSQL_PASSWORD: test_password
          MONGODB_URI: mongodb://localhost:27017/test_sync_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: test_sync_db
          POSTGRES_USERNAME: test_user
          POSTGRES_PASSWORD: test_password
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DATABASE: test_sync_db
          MYSQL_USERNAME: test_user
          MYSQL_PASSWORD: test_password
          MONGODB_URI: mongodb://localhost:27017/test_sync_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/worker-sync
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: typescript

  # ============================================================================
  # BUILD & PUSH DOCKER IMAGE
  # ============================================================================
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, security]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: apps/worker-sync
          file: apps/worker-sync/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ============================================================================
  # LOAD TESTING
  # ============================================================================
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          cd apps/worker-sync
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3003/health; do sleep 5; done'

      - name: Run load tests
        run: |
          cd apps/worker-sync
          k6 run --vus 50 --duration 5m tests/load_test.js
        env:
          BASE_URL: http://localhost:3001
          HEALTH_URL: http://localhost:3003

      - name: Cleanup test environment
        if: always()
        run: |
          cd apps/worker-sync
          docker-compose -f docker-compose.test.yml down -v

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, load-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          cd apps/worker-sync/k8s
          
          # Update image tag
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}|g" deployment.yaml
          
          # Apply manifests
          kubectl apply -f . -n sync-system-staging
          
          # Wait for rollout
          kubectl rollout status deployment/worker-sync -n sync-system-staging --timeout=300s

      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          STAGING_URL=$(kubectl get service worker-sync -n sync-system-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health check
          curl -f http://$STAGING_URL:3003/health
          
          # Basic functionality test
          curl -f http://$STAGING_URL:3001/sync/status

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, load-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          cd apps/worker-sync/k8s
          
          # Update image tag
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}|g" deployment.yaml
          
          # Apply manifests
          kubectl apply -f . -n sync-system
          
          # Wait for rollout
          kubectl rollout status deployment/worker-sync -n sync-system --timeout=600s

      - name: Run production smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          PROD_URL=$(kubectl get service worker-sync -n sync-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health check
          curl -f http://$PROD_URL:3003/health
          
          # Metrics check
          curl -f http://$PROD_URL:3003/metrics
          
          # Sync status check
          curl -f http://$PROD_URL:3001/sync/status

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Worker Sync deployed to production successfully!
            
            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}
            **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # CLEANUP
  # ============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: worker-sync
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true