version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: audit-postgres-demo
    environment:
      POSTGRES_DB: audit_db
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: audit_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_demo_data:/var/lib/postgresql/data
      - ./deploy/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - audit-demo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: audit-redis-demo
    ports:
      - "6379:6379"
    volumes:
      - redis_demo_data:/data
    networks:
      - audit-demo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: audit-rabbitmq-demo
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - audit-demo-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: audit-prometheus-demo
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_demo_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - audit-demo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: audit-grafana-demo
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
    ports:
      - "3000:3000"
    volumes:
      - grafana_demo_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - audit-demo-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Demo Mode)
  api-gateway:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: audit-api-gateway-demo
    environment:
      NODE_ENV: development
      PORT: 3001
      # Database connections
      DATABASE_URL: postgresql://audit_user:audit_password@postgres:5432/audit_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: audit_db
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: audit_password
      # Cache & Queue
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      # Monitoring
      PROMETHEUS_GATEWAY: prometheus:9090
      # Security
      JWT_SECRET: demo-jwt-secret-key-with-32-chars-minimum
      JWT_EXPIRES_IN: 24h
      ENCRYPTION_KEY: demo-32-char-encryption-key-here
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - audit-demo-network
    command: sh -c "cd apps/api && npm install prisma @prisma/client && npx prisma generate && npx tsx src/server.ts"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
        interval: 30s
        timeout: 10s
        retries: 5

volumes:
  postgres_demo_data:
    driver: local
  redis_demo_data:
    driver: local
  prometheus_demo_data:
    driver: local
  grafana_demo_data:
    driver: local

networks:
  audit-demo-network:
    driver: bridge